<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Zend Framework 2 | Blog Rudy Lee]]></title>
  <link href="http://blog.rudylee.com/categories/zend-framework-2/atom.xml" rel="self"/>
  <link href="http://blog.rudylee.com/"/>
  <updated>2014-10-27T17:13:04+11:00</updated>
  <id>http://blog.rudylee.com/</id>
  <author>
    <name><![CDATA[Rudy Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Override module config in Zend Framework 2]]></title>
    <link href="http://blog.rudylee.com/2013/05/16/override-module-config-in-zend-framework-2/"/>
    <updated>2013-05-16T11:12:19+10:00</updated>
    <id>http://blog.rudylee.com/2013/05/16/override-module-config-in-zend-framework-2</id>
    <content type="html"><![CDATA[<p>There is a time when you want to override module config in your Zend Framework 2 application. In my case, I have different configuration for SMS gateway in staging and live server. You can do this by overwriting the module.config.php file inside the module config&rsquo;s folder. However, there are heaps of configuration inside module.config.php file. This approach will lead to maintenance nightmare when you need to change one or more configuration inside the file.</p>

<p>The cleanest approach is to override specific configuration key by creating module-name.local.php file inside config/autoload folder. For example, you have &ldquo;Admin&rdquo; module and here is the sample module.config.php file :</p>

<p>``` php
return array(</p>

<pre><code>'sms' =&gt; array(
    'username' =&gt; 'rudy', //API access username
    'password' =&gt; 'rudy', //API access password
    'sender' =&gt; 'Rudy', // max of 11 alphanumeric or max of 15 numerical characters
),
</code></pre>

<p>);
```</p>

<p>You can override only the username by creating admin.local.php file inside config/autoload folder and put this code inside it :</p>

<p>``` php  <br/>
return array(</p>

<pre><code>'sms' =&gt; array(
    'username' =&gt; 'override', //API access username
),
</code></pre>

<p>);
```</p>

<p>Zend Framework 2 will read this file and overwrite the username key inside module.config.php. Now you can create script during your deployment process to create this file automatically.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zend Framework 2 : The proper way to set application path in Javascript Object]]></title>
    <link href="http://blog.rudylee.com/2013/05/06/zend-framework-2-the-proper-way-to-set-application-path-in-javascript-object/"/>
    <updated>2013-05-06T14:44:36+10:00</updated>
    <id>http://blog.rudylee.com/2013/05/06/zend-framework-2-the-proper-way-to-set-application-path-in-javascript-object</id>
    <content type="html"><![CDATA[<p>Storing application path inside Javascript object is a way to avoid &ldquo;hard coded&rdquo; URL inside your Javascript file.  It is pretty common to have like this in your Javascript file :</p>

<p>``` javascript</p>

<pre><code>$.ajax({
    type: POST,
    url: 'http://localhost/my-website/register',
    data: dataJSON
})
</code></pre>

<p>```</p>

<p>That approach is completely fine. However, when you need to deploy your application, you need to manually change all the URL to match with your server. The solution that I have been using for quite a long time is setting up Javascript object that contains path to my application.</p>

<p>In CakePHP, this can be easily done by using URL method inside Router Class. Here is the sample :</p>

<p>``` php<br/>
$cbunny = array(</p>

<pre><code>'APP_PATH' =&gt; Router::url('/',true)
</code></pre>

<p>);
echo $this->Html->scriptBlock(&lsquo;var CbunnyObj = &rsquo; . $this->Javascript->object($cbunny) . &lsquo;;&rsquo;);
```</p>

<p>In Zend Framework 2, you have to rely on serverUrl and basePath to achieve the same thing. Here is the proper way to do it in Zend Framework 2 :</p>

<p>``` javascript</p>

<script type="text/javascript">
    //&lt;![CDATA[
        var CMSObj = {
            "APP_PATH":"<?php echo $this->serverUrl() . $this->basePath() ?>/"
        };
    //]]&gt;
</script>


<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zend Framework 2 : get server URL in controller without using serverUrl()]]></title>
    <link href="http://blog.rudylee.com/2013/02/15/zend-framework-2-get-server-url-in-controller-without-using-serverurl/"/>
    <updated>2013-02-15T16:22:35+11:00</updated>
    <id>http://blog.rudylee.com/2013/02/15/zend-framework-2-get-server-url-in-controller-without-using-serverurl</id>
    <content type="html"><![CDATA[<p>Sometimes you need to be able to get current server URL inside controller in your Zend Framework 2 application. As you might know, you won&rsquo;t be able to use $this->serverUrl() method in the controller as it&rsquo;s a part of helper.</p>

<p>So, here is the code that I am using to get server URL in controller :</p>

<p>``` php</p>

<pre><code>$server_url = $this-&gt;getRequest()-&gt;getUri()-&gt;getScheme() . '://' . $this-&gt;getRequest()-&gt;getUri()-&gt;getHost();
</code></pre>

<p>```</p>

<p>Probably it&rsquo;s not the best solution but it works for now :)</p>
]]></content>
  </entry>
  
</feed>
